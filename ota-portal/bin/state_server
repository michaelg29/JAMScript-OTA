#!/usr/bin/env node
/**
 * Server to respond to node status changes.
 */

const errors = require("./../utils/httperror");
const ijam = require("../utils/ijam_types");
const node = require("./../utils/node");
const tcp = require("../utils/tcp");

const server = tcp.startServer(process.env.STATE_SERVER_PORT, undefined, (sock, data) => {
    try {
        var buf = Buffer.from(data);
        console.log("Received", buf.byteLength, "bytes");

        // get the requesting node id
        let cursor = 0;
        var nodeId = ijam.readUUID(buf, cursor);
        console.log("nodeid", nodeId);
        cursor += 16;

        // get node key and decrypt
        let err = undefined;
        node.getNode(nodeId)
            .then(([nodeObj, _]) => {
                tcp.decryptMessage(buf, Buffer.from(nodeObj.encKey, "hex"), cursor);
            })
            .catch((error) => {
                console.log("err", error);
                err = error;
            });

        if (err) {
            throw err;
        }
    } catch (error) {
        // send error response
        console.log(error.statusCode, error.message);
        tcp.sendResponse(sock, error.statusCode || 500, Buffer.from(error.message));
    }
});
