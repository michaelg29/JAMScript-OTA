#!/usr/bin/env node
/**
 * Server to respond to node status changes.
 */

const errors = require("./../utils/httperror");
const ijam = require("../utils/ijam_types");
const node = require("./../utils/node");
const tcp = require("../utils/tcp");

const server = tcp.startServer(process.env.STATE_SERVER_PORT, undefined, (sock, data) => {
    try {
        var buf = Buffer.from(data);
        console.log("Received", buf.byteLength, "bytes");

        // get the requesting node id
        let cursor = 0;
        var nodeId = ijam.readUUID(buf, cursor);
        console.log("nodeid", nodeId);
        cursor += 16;

        // get node key and decrypt
        node.getNode(nodeId)
            .then(([nodeObj, _]) => {
                // decrypt
                let dec = tcp.decryptMessage(buf, Buffer.from(nodeObj.encKey, "hex"), cursor);
                if (!dec) {
                    errors.error(400, "Invalid checksum");
                }

                let promise = undefined;

                // validate and execute requested transition
                let nodeStatus = ijam.parseNodeStatusRequest(dec);
                switch (nodeStatus.nodeStatus) {
                    case ijam.node.statuses.ONLINE:
                        promise = node.transition.online(nodeId, nodeObj, sock.address().address);
                        break;
                    case ijam.node.statuses.LOADING:
                        promise = node.transition.loading(nodeId, nodeObj);
                        break;
                    case ijam.node.statuses.OFFLINE:
                        promise = node.transition.offline(nodeId, nodeObj);
                        break;
                }

                // return
                promise
                    .then(() => {
                        console.log("Transitioned to", nodeStatus.nodeStatus);
                        if (nodeStatus.nodeStatus == ijam.node.statuses.LOADING) {
                            console.log("Start program load for node", nodeId);
                        }

                        tcp.sendResponse(sock, 200);
                    })
                    .catch((error) => {
                        tcp.sendError(sock, error);
                    })
            })
            .catch((error) => {
                tcp.sendError(sock, error);
            });
    } catch (error) {
        // send error response
        tcp.sendError(sock, error);
    }
});
