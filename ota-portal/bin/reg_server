#!/usr/bin/env node
/**
 * Server to grant ijam nodes registration.
 */

const crypto = require("crypto");
const errors = require("./../utils/httperror");
const fs = require("fs");
const ijam = require("../utils/ijam_types");
const network = require("./../utils/network");
const node = require("./../utils/node");
const tcp = require("../utils/tcp");

const privKey = Buffer.from(fs.readFileSync(process.env.RSA_PKEY_PATH, {encoding: "utf-8"}));

const server = tcp.startServer(process.env.REG_SERVER_PORT, undefined, (sock, data) => {
    try {
        var buf = Buffer.from(data);
        console.log("Received", buf.byteLength, "bytes");

        // get message and decrypt
        const decrypted = crypto.privateDecrypt({
            key: privKey,
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha1"
        }, buf);

        console.log("decrypted", decrypted.byteLength, "bytes");

        let req;
        try {
            req = ijam.parseRegisterRequest(decrypted);
        } catch (error) {
            console.log("request", error);
            errors.error(400, "request");
        }

        // validate network registration
        network.getNetwork(req.networkId)
            .then(([networkObj, _]) => {
                if (!networkObj) {
                    errors.error(404, "network");
                }

                if (networkObj.regKey !== req.networkRegKey) {
                    errors.error(401, "regkey");
                }
                let username = networkObj.username;

                // create node entry
                let uuid = req.nodeId == ijam.emptyUUID ? ijam.createUUID() : req.nodeId;
                node.obj.create(uuid, req.networkId, username, "node", req.nodeType, req.nodeKey.toString("hex"))
                    .then(() => {
                        console.log("New node with UUID", uuid);

                        tcp.encryptAndSend(sock, 200, req.nodeKey, Buffer.from(uuid.replace(/-/g, ""), "hex"));
                    })
                    .catch((error) => {
                        tcp.sendError(sock, error);
                    });
            })
            .catch((error) => {
                tcp.sendError(sock, error);
            });
    } catch (error) {
        // send error response
        tcp.sendError(sock, error);
    }
});
