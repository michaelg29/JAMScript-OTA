#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var http = require('http');
var https = require('https');
var fs = require('fs');
var crypto = require('crypto');
var rclient = require('../utils/redis-client');

/**
 * Create admin user.
 */
if (process.env.PORTAL_ADMIN_PASSWORD) {
  // generate password hash
  const passSalt = crypto.randomBytes(16).toString("hex");
  const passHash = crypto
      .createHmac("sha512", passSalt)
      .update(process.env.PORTAL_ADMIN_PASSWORD)
      .digest("hex");

  rclient.setObj(`user:${process.env.PORTAL_ADMIN_USERNAME || "admin"}`, {
    email: process.env.PORTAL_ADMIN_EMAIL,
    passHash: passHash,
    passSalt: passSalt,
    name: "Admin",
    type: "admin",
  }).then(([err, reply]) => {
    if (err) {
      console.log("Could not create admin user.");
    } else {
      console.log("Admin user created with username", process.env.PORTAL_ADMIN_USERNAME || "admin");
    }
  });
}

/**
 * Get port from environment and store in Express.
 */
let port;

/**
 * Create HTTP server.
 */
let server;
if (process.env.PORTAL_PROTOCOL === 'https') {
  var pkey = fs.readFileSync(process.env.PORTAL_HTTPS_PKEY_PATH);
  var cert = fs.readFileSync(process.env.PORTAL_HTTPS_CERT_PATH);
  server = https.createServer({key: pkey, cert: cert}, app);
  port = normalizePort(process.env.PORTAL_PORT || '8443');
}
else {
  server = http.createServer(app);
  port = normalizePort(process.env.PORTAL_PORT || '8080');
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind)
}
