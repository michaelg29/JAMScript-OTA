#!/usr/bin/env node
/**
 * Program to communicate with online nodes.
 */

// standard includes
const fs = require("fs");
const net = require("net");

// OTA includes
const ijam = require("../utils/ijam_types");
const tcp = require("../utils/tcp");
const channel = require("../utils/channel");

// statuses of the TCP clients communicating with each node.
const client_statuses = {
    OKAY: 0,
    WAITING: 1,
    RETRY: 2,
    DONE: 3,
    FAIL: 4
};

function killProgram(msg) {
    console.log("ERROR in jxe_loader: ", msg);
    process.exit(1);
}

function usageError() {
    killProgram(`node ./jxe_loader --networkId <NETWORK_ID> --type <UPLOAD_TYPE> [--name <FILE_NAME>] [--blksize <BLK_SIZE>]\n` +
        `    --networkId UUID of the network channel to broadcast to.\n` + 
        `    --type The type of content to broadcast. Must be "${ijam.node.reqTypes.FILE}" or "${ijam.node.reqTypes.CMD}".\n` +
        `    --name The name of the file to upload.\n` +
        `    --blksize The size (in bytes) of the blocks to send the content to the node.\n`);
}

/**
 * Data callback for a node.
 * @param nodeObj The node object.
 * @param data The data received from the node.
 * @param done Whether the file has been completely read.
 */
function nodeDataCallback(nodeObj, data, done) {
    console.log("\n\nReceived", data.byteLength, "bytes");
    // validate response
    if (data.byteLength != 2) {
        nodeObj["client"].end();
        nodeObj["status"] = client_statuses.FAIL;
        return;
    }

    // check status
    let status = data.readInt16LE(0);
    if (status == 200) {
        console.log("OKAY");
    }
    else if (status == 302) {
        console.log("Too many error responses, must retry program execution.");
        nodeObj["client"].end();
        nodeObj["status"] = client_statuses.FAIL;
    }
    else {
        console.log("Received status code", status, "retrying");
        nodeObj["status"] = client_statuses.RETRY;
    }

    if (done) {
        nodeObj["status"] = client_statuses.DONE;
    }
    else {
        nodeObj["status"] = client_statuses.OKAY;
    }
}

/**
 * Send a buffer to a node.
 * @param {object} nodeObj The node object with client object and status.
 * @param {Buffer} buf The buffer to send.
 * @param {number} bytes The number of bytes in the buffer.
 */
function sendNodeData(nodeObj, buf, bytes) {
    nodeObj["status"] = client_statuses.WAITING;
    console.log("Sending", bytes, "bytes", buf.toString("hex", 0, bytes));
    tcp.encryptAndSend(nodeObj["client"], undefined, nodeObj["encKey"], buf.subarray(0, bytes));
}

// ===============================
// ===== ARGUMENT VALIDATION =====
// ===============================

// default parameters
let networkId = "";
let reqType = "";
let reqName = "";
let blockSize = 128 - 2;

// parse command line arguments
for (let i = 0; i < process.argv.length; ++i) {
    let valid = true;

    // arguments as switches
    switch (process.argv[i]) {
    default:
        valid = false;
        break;
    };

    // arguments with values
    if (!valid && i < process.argv.length - 1) {
        let val = process.argv[i + 1];
        valid = true;
        switch (process.argv[i]) {
        case "--networkId":
            networkId = val;
            break;
        case "--type":
            reqType = val;
            break;
        case "--name":
            reqName = val;
            break;
        case "--blksize":
            blockSize = Number.parseInt(val);
            break;
        default:
            valid = false;
            break;
        };

        if (valid) {
            // advance cursor past value
            i += 1;
        }
    }

    if (!valid) {
        console.log("Unrecognized argument:", process.argv[i]);
    }
}

console.log(networkId, reqType, reqName, blockSize);

// validate command line arguments
if (networkId.length == 0 || (reqType != ijam.node.reqTypes.FILE && reqType != ijam.node.reqTypes.CMD) || blockSize <= 0) {
    usageError();
}

// get requested filepath
let filepath = "";
if (reqType == ijam.node.reqTypes.FILE) {
    filepath = `${process.env.CHANNELS_DIR}/${networkId}/files/${reqName}`;
}
else if (reqType == ijam.node.reqTypes.CMD) {
    filepath = `${process.env.CHANNELS_DIR}/${networkId}/__cmd__`;
}

// validate file
let fileSize = 0;
try {
    fileSize = fs.statSync(filepath).size;
} catch (e) {
    console.log(e);
}
if (fileSize == 0) {
    throw "Could not find data or data is empty.";
}

// =========================
// ===== MAIN FUNCTION =====
// =========================

// client node object list
let nodes = [];

// open file
let sentDone = false, ackDone = false;
let fd = fs.openSync(filepath, "r");

// buffer variables
let buf = Buffer.alloc(8);
let bytes = buf.byteLength;
let cursor = -bytes; // offset for first addition

/**
 * Function to send a new buffer to the nodes every second.
 */
function mainLoop() {
    // wait for nodes to acknowledge previous packet
    let unfinished = false;
    for (let nodeObj of nodes) {
        if (nodeObj["status"] == client_statuses.WAITING) {
            // continue waiting
            unfinished = true;
        }
        else if (nodeObj["status"] == client_statuses.RETRY) {
            // retry message
            sendNodeData(nodeObj, buf, bytes);
            unfinished = true;
        }
    }
    
    // advance to next state if all nodes are synchronized
    if (!unfinished) {
        // advance cursor
        cursor += bytes;

        // construct next buffer
        bytes = 0;
        if (sentDone) {
            // break out of loop
            ackDone = true;
        }
        else if (cursor < fileSize) {
            // read file block
            buf = Buffer.alloc(blockSize);
            bytes = fs.readSync(fd, buf, 0, blockSize);
        }
        else {
            // send done message
            buf = Buffer.from([0x00, 0x00, 0x00, 0x00]);
            bytes = buf.byteLength;
            sentDone = true;
        }

        if (bytes > 0) {
            // send buffer to nodes
            for (let nodeObj of nodes) {
                if (nodeObj["status"] == client_statuses.OKAY) {
                    sendNodeData(nodeObj, buf, bytes);
                }
            }
        }
    }

    // loop condition
    if (ackDone) {
        // end program
        for (let nodeObj of nodes) {
            nodeObj["client"].end();
        }
        process.exit(0);
    }
    else {
        // wait another second then check to send next packet
        setTimeout(mainLoop, 1000);
    }
}

// initialize node list and start send sequence
channel.getChannelNodes(networkId, true, true)
    .then((nodeList) => {
        // initial request buffer to transition state
        buf.writeInt32LE(ijam.oneHotEncoding(ijam.node.reqTypes, reqType), 0);
        buf.writeInt32LE(fileSize, 4);
        console.log("nodes", nodeList);

        // initialize all clients
        for (let nodeObj of nodeList) {
            // determine IP address
            let ip = !!process.env.DOCKER ? "host.docker.internal" : nodeObj.ip;

            // initial node state
            nodeObj["status"] = client_statuses.WAITING;
            nodeObj["encKey"] = Buffer.from(nodeObj.encKey, "hex");

            // start client
            nodeObj["client"] = new net.Socket();
            tcp.startClient(nodeObj["client"], ip, Number.parseInt(process.env.OTA_ONLINE_PORT), () => {
                // request the node transitions to loading
                sendNodeData(nodeObj, buf, bytes);
            }).on("data", (data) => {
                nodeDataCallback(nodeObj, data, sentDone);
            });

            // add to list
            nodes.push(nodeObj);

            // start processing
            setTimeout(mainLoop, 1000);
        }
    })
    .catch((error) => {
        killProgram(error);
    });
