#!/usr/bin/env node

const fs = require("fs");
const crypto = require("crypto");

const input = Buffer.from(fs.readFileSync("out"));
console.log(input.byteLength, "Encrypted");
console.log(input.toString("hex"));
const privKey = Buffer.from(fs.readFileSync("key_rsa.pem"));
const decrypted = crypto.privateDecrypt({
    key: privKey,
    padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
    oaepHash: "sha256",
}, input);
console.log("Decrypted", decrypted.toString("hex"), decrypted.toString());
process.exit(0);

const pubKey = Buffer.from(fs.readFileSync("cert_rsa.pem"));
const encrypted = crypto.publicEncrypt({
    key: pubKey,
    padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
    oaepHash: "sha256",
}, Buffer.from("Hello, my bruh!"));
console.log("Encrypted", encrypted.toString("hex"));
process.exit(0);

const net = require("net");
const host = "localhost";
const port = 8444;

const client1 = new net.Socket();
client1.connect(port, host, function(){
	// Log when the connection is established
    console.log(`Client 1 :Connected to server on port ${port}`);
   
    // Try to send data to the server 
    console.log("Sending", input.length, "bytes");
    console.log(input.toString("hex"));
    let array = new Uint8Array(input.length);
    input.copy(array);
    client1.write(array, "utf-8");

    // const proc = spawn("openssl", ["rsautl", "-encrypt", "-pubin", "-inkey", "cert_rsa.pem", "-pkcs"], {
    //     detached: true
    // });

    // proc.stdin.write(input);
    // proc.stdin.end();

    // proc.stdout.on("data", (data) => {
    //     //const buf = fs.readFileSync("out");
    //     //const buf = encrypted;
    //     console.log(typeof data);
    //     const buf = data;
    //     let array = new Uint8Array(buf.byteLength);
    //     console.log("Sending", buf.byteLength, "bytes");
    //     buf.copy(array);
    //     client1.write(array, "utf-8");
    // });
});
//Handle data coming from the server
client1.on('data',function(data){
    console.log(`Client 1 received from server : ${data}`);    
});
// Handle connection close 
client1.on('close',function(){
    console.log('Client 1 :Connection Closed');
});
//Handle error
client1.on('error',function(error){
    console.error(`Connection Error ${error}`); 
});
